1. Functionality Testing:
1.1 Positive Test Cases:
Test Case 1: Shorten URL

1. Navigate to the URL shortening service.
2. Enter a valid long URL.
3. Click on the "Shorten" button.
Expected Outcome: A short URL is generated and redirects to the original URL.
Test Case 2: Custom Short URL
1. Navigate to the URL shortening service.
2. Enter a valid long URL and a custom short URL.
3. Click on the "Shorten" button.
Expected Outcome: The custom short URL is generated and redirects to the original URL.
1.2 Negative Test Cases:
Test Case 3: Invalid URL
1. Navigate to the URL shortening service.
2. Enter an invalid or malformed URL.
3. Click on the "Shorten" button.
Expected Outcome: An error message is displayed, indicating an invalid URL.
Test Case 4: Shorten Same URL Twice

Shorten a valid URL.
Attempt to shorten the same URL again.
Expected Outcome: An error message is displayed, indicating the URL is already shortened.
2. User Experience Testing:
2.1 Positive Test Cases:
Test Case 5: Responsive Design

Access the URL shortening service from different devices (desktop, tablet, mobile).
Expected Outcome: The service is responsive and provides a good user experience across devices.
Test Case 6: Short URL Accessibility

Shorten a URL.
Access the short URL from various browsers (Chrome, Firefox, Safari).
Expected Outcome: The short URL is accessible and functional across different browsers.
2.2 Negative Test Cases:
Test Case 7: Unsupported Browser
1. Access the URL shortening service from an unsupported browser.
2. Expected Outcome: Display a message indicating that the browser is not supported.
Code:
import pytest
from selenium import webdriver
from selenium.webdriver.common.keys import Keys

@pytest.fixture
def browser():
    driver = webdriver.Chrome(executable_path='/path/to/chromedriver')
    yield driver
    driver.quit()

def test_shorten_url(browser):
    # Test Case 1: Shorten URL
    browser.get("https://github.com/1pt-co/1pt")
    url_input = browser.find_element_by_id("long-url")
    url_input.send_keys("https://www.example.com")
    url_input.send_keys(Keys.RETURN)
    
    short_url = browser.find_element_by_id("short-url").text
    assert short_url, "Short URL not generated"
    assert browser.current_url == short_url, "Short URL does not redirect to the original URL"

def test_custom_short_url(browser):
    # Test Case 2: Custom Short URL
    browser.get("https://github.com/1pt-co/1pt")
    url_input = browser.find_element_by_id("long-url")
    url_input.send_keys("https://www.example.com")
    
    custom_url_input = browser.find_element_by_id("custom-url")
    custom_url_input.send_keys("custom")
    
    url_input.send_keys(Keys.RETURN)
    
    short_url = browser.find_element_by_id("short-url").text
    assert short_url == "https://github.com/1pt-co/1pt/custom", "Custom short URL not generated"
